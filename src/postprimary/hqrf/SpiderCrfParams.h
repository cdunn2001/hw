// Copyright (c) 2018-2019, Pacific Biosciences of California, Inc.
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted (subject to the limitations in the
// disclaimer below) provided that the following conditions are met:
//
//  * Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
//
//  * Redistributions in binary form must reproduce the above
//    copyright notice, this list of conditions and the following
//    disclaimer in the documentation and/or other materials provided
//    with the distribution.
//
//  * Neither the name of Pacific Biosciences nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE
// GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY PACIFIC
// BIOSCIENCES AND ITS CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL PACIFIC BIOSCIENCES OR ITS
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
// USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
// OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
// SUCH DAMAGE.

/// This file is automatically generated by the CRF training scripts in
/// primary-toolkit (classifiers/CRF.py). Do not edit this file manually!

#pragma once

#include <algorithm>
#include <array>
#include <limits>
#include <tuple>
#include <vector>

#include <bazio/BlockActivityLabels.h>
#include "HQRegionFinderModels.h"

namespace PacBio {
namespace Primary {
namespace Postprimary {

struct SpiderCrfModel
{

enum class State : uint8_t
{
    EMPTY = 0,
    SINGLE,
    MULTI,

    CARDINALITY
};

static std::vector<ActivityLabeler::Activity> State2Activity(
        const std::vector<State>& stateSeq,
        const std::vector<float>& blockSNRs,
        float snrThresh)
{
    (void)blockSNRs;
    (void)snrThresh;
    std::vector<ActivityLabeler::Activity> ret;
    std::transform(stateSeq.begin(), stateSeq.end(),
                   std::back_inserter(ret),
                   [](const auto& val){ return static_cast<ActivityLabeler::Activity>(val); });
    return ret;
}

static constexpr std::array<float, 2> hswCurve {{0.022, 0.023}};

static constexpr std::array<std::array<float, 3>, 3> transitionScores {{
	{{2.260273, -2.342547, -3.321127}},
	{{-1.591285, 3.40237, -3.533747}},
	{{-8.224657, -2.537583, 2.831499}},
}};

static constexpr float numFeatures = 73;

static constexpr std::array<std::array<float, 3>, 73> featureWeights {{
	{{0.266095, 0.062518, 0.172592}},	// Autocorrelation[0.0,0.1)
	{{0.168046, -0.111596, 0.023435}},	// Autocorrelation[0.1,0.2)
	{{0.074052, -0.073182, 0.070757}},	// Autocorrelation[0.2,0.3)
	{{0.052702, -0.076262, 0.144902}},	// Autocorrelation[0.3,0.4)
	{{0.029612, -0.063756, 0.00634}},	// Autocorrelation[0.4,0.5)
	{{-0.184328, 0.015885, 0.207457}},	// Autocorrelation[0.5,0.6)
	{{-0.455769, 0.118197, 0.259222}},	// Autocorrelation[0.6,0.7)
	{{-0.75934, 0.121644, 0.230298}},	// Autocorrelation[0.7,0.8)
	{{-0.297285, -0.014448, 0.086265}},	// Autocorrelation[0.8,0.9)
	{{-1.42027, 0.518052, -0.098296}},	// Autocorrelation[0.9,)
	{{0.235201, 0.063441, 0.084004}},	// BlockLowSNR[0.0,1.0)
	{{-0.003885, -0.081677, 0.13087}},	// BlockLowSNR[1.0,3.0)
	{{0.062433, -0.139647, 0.06164}},	// BlockLowSNR[3.0,3.75)
	{{0.213189, -0.063005, 0.046856}},	// BlockLowSNR[3.75,4.0)
	{{0.018514, -0.05307, 0.123093}},	// BlockLowSNR[4.0,5.0)
	{{0.13491, -0.039924, 0.101514}},	// BlockLowSNR[5.0,)
	{{0.073812, -0.108772, -0.142862}},	// BpzvarNorm[0.0,0.005)
	{{-0.028586, -0.263429, 0.220445}},	// BpzvarNorm[0.005,0.01)
	{{0.285374, -0.287775, 0.244658}},	// BpzvarNorm[0.01,0.015)
	{{0.260258, -0.502985, 0.011682}},	// BpzvarNorm[0.015,)
	{{0.421146, -0.03316, 0.108368}},	// LabelStutterRate[0.0,0.1)
	{{-0.463777, 0.029411, 0.104041}},	// LabelStutterRate[0.1,0.2)
	{{-0.191279, 0.076864, 0.119128}},	// LabelStutterRate[0.2,0.3)
	{{-0.086051, -0.065864, 0.019143}},	// LabelStutterRate[0.3,0.4)
	{{-0.222159, 0.150852, 0.151326}},	// LabelStutterRate[0.4,0.5)
	{{0.154315, -0.159679, -0.102216}},	// LabelStutterRate[0.5,0.6)
	{{0.179599, -0.18302, -0.097175}},	// LabelStutterRate[0.6,0.7)
	{{-0.187203, 0.028583, 0.111711}},	// LabelStutterRate[0.7,0.8)
	{{0.042952, 0.016768, -0.101947}},	// LabelStutterRate[0.8,0.9)
	{{0.234712, -0.153618, -0.183494}},	// LabelStutterRate[0.9,)
	{{-0.061515, 0.091745, 4.2e-05}},	// LocalHswRateNorm[-0.01,0.0)
	{{0.132388, 0.056046, -0.016159}},	// LocalHswRateNorm[-0.02,-0.01)
	{{0.107865, 0.041824, -0.031237}},	// LocalHswRateNorm[-0.03,-0.02)
	{{0.28035, -0.164991, -0.226074}},	// LocalHswRateNorm[-0.04,-0.03)
	{{-0.028764, 0.074974, -0.095336}},	// LocalHswRateNorm[-10.0,-0.04)
	{{-0.134708, 0.038649, 0.035492}},	// LocalHswRateNorm[0.0,0.01)
	{{-0.554047, 0.054587, -0.001892}},	// LocalHswRateNorm[0.01,0.02)
	{{-0.676812, 0.046179, 0.000163}},	// LocalHswRateNorm[0.02,0.03)
	{{-0.869442, -0.038827, 0.085788}},	// LocalHswRateNorm[0.03,0.04)
	{{0.243836, -0.383251, 0.168321}},	// LocalHswRateNorm[0.04,)
	{{0.08704, 0.127497, 0.497928}},	// MaxPkMaxNorm[0,1)
	{{0.128964, -0.098148, -0.113924}},	// MaxPkMaxNorm[1,2)
	{{0.064887, -0.14679, -0.21002}},	// MaxPkMaxNorm[2,3)
	{{0.041254, -0.046934, -0.121241}},	// MaxPkMaxNorm[3,4)
	{{-0.030711, 0.001306, -0.044236}},	// MaxPkMaxNorm[4,5)
	{{0.075868, 0.064559, 0.05922}},	// MaxPkMaxNorm[5,6)
	{{0.023916, 0.006683, -0.05478}},	// MaxPkMaxNorm[6,7)
	{{0.119108, -0.020242, -0.016789}},	// MaxPkMaxNorm[7,8)
	{{0.019715, -0.029825, 0.049546}},	// MaxPkMaxNorm[8,9)
	{{0.069729, 0.058661, -0.010155}},	// MaxPkMaxNorm[9,)
	{{0.154798, -0.117858, 0.126386}},	// MeanPulseWidth[0,1)
	{{0.206613, -0.251536, 0.38836}},	// MeanPulseWidth[1,2)
	{{0.373011, -0.196221, 0.005057}},	// MeanPulseWidth[2,3)
	{{0.336688, -0.337986, 0.371895}},	// MeanPulseWidth[3,4)
	{{0.277417, -0.276006, -0.206069}},	// MeanPulseWidth[4,5)
	{{-0.314088, 0.405994, 0.848078}},	// MeanPulseWidth[5,6)
	{{-0.49521, 0.406467, 1.02696}},	// MeanPulseWidth[6,7)
	{{-0.552544, 0.337657, 0.412465}},	// MeanPulseWidth[7,8)
	{{-0.51334, -0.022068, 0.388128}},	// MeanPulseWidth[8,)
	{{0.265825, -0.282422, -0.30262}},	// PulseRate[0,1)
	{{0.54718, 0.063105, 0.029838}},	// PulseRate[1,2)
	{{0.697002, 0.004618, -0.006011}},	// PulseRate[2,3)
	{{0.538717, -0.322409, 0.187876}},	// PulseRate[3,4)
	{{0.558187, -0.4221, -0.11937}},	// PulseRate[4,)
	{{0.238102, 0.332456, -0.353832}},	// SandwichRate[0.0,0.02)
	{{-0.022951, 0.289048, -0.309565}},	// SandwichRate[0.02,0.04)
	{{-1.796351, 0.070643, -0.083411}},	// SandwichRate[0.04,0.06)
	{{-1.173862, -0.045923, 0.013197}},	// SandwichRate[0.06,0.08)
	{{0.40576, -0.424081, 0.203088}},	// SandwichRate[0.08,)
	{{-0.181516, -0.188822, 0.01092}},	// ViterbiScore[-5.3,)
	{{0.083303, -0.066503, 0.130183}},	// ViterbiScore[-6.3,-5.3)
	{{0.490966, -0.378315, -1.538893}},	// ViterbiScore[-7.3,-6.3)
	{{0.306965, -0.282852, 0.0}},	// ViterbiScore[-8.3,-7.3)
}};

// Features are specified by their source feature and range
// which allows for learning discontinuous discrete feature
static constexpr std::array<std::tuple<CrfFeature, float, float>, 73> features {{
	std::make_tuple(CrfFeature::AUTOCORRELATION, 0.0, 0.1),
	std::make_tuple(CrfFeature::AUTOCORRELATION, 0.1, 0.2),
	std::make_tuple(CrfFeature::AUTOCORRELATION, 0.2, 0.3),
	std::make_tuple(CrfFeature::AUTOCORRELATION, 0.3, 0.4),
	std::make_tuple(CrfFeature::AUTOCORRELATION, 0.4, 0.5),
	std::make_tuple(CrfFeature::AUTOCORRELATION, 0.5, 0.6),
	std::make_tuple(CrfFeature::AUTOCORRELATION, 0.6, 0.7),
	std::make_tuple(CrfFeature::AUTOCORRELATION, 0.7, 0.8),
	std::make_tuple(CrfFeature::AUTOCORRELATION, 0.8, 0.9),
	std::make_tuple(CrfFeature::AUTOCORRELATION, 0.9, std::numeric_limits<float>::infinity()),
	std::make_tuple(CrfFeature::BLOCKLOWSNR, 0.0, 1.0),
	std::make_tuple(CrfFeature::BLOCKLOWSNR, 1.0, 3.0),
	std::make_tuple(CrfFeature::BLOCKLOWSNR, 3.0, 3.75),
	std::make_tuple(CrfFeature::BLOCKLOWSNR, 3.75, 4.0),
	std::make_tuple(CrfFeature::BLOCKLOWSNR, 4.0, 5.0),
	std::make_tuple(CrfFeature::BLOCKLOWSNR, 5.0, std::numeric_limits<float>::infinity()),
	std::make_tuple(CrfFeature::BPZVARNORM, 0.0, 0.005),
	std::make_tuple(CrfFeature::BPZVARNORM, 0.005, 0.01),
	std::make_tuple(CrfFeature::BPZVARNORM, 0.01, 0.015),
	std::make_tuple(CrfFeature::BPZVARNORM, 0.015, std::numeric_limits<float>::infinity()),
	std::make_tuple(CrfFeature::LABELSTUTTERRATE, 0.0, 0.1),
	std::make_tuple(CrfFeature::LABELSTUTTERRATE, 0.1, 0.2),
	std::make_tuple(CrfFeature::LABELSTUTTERRATE, 0.2, 0.3),
	std::make_tuple(CrfFeature::LABELSTUTTERRATE, 0.3, 0.4),
	std::make_tuple(CrfFeature::LABELSTUTTERRATE, 0.4, 0.5),
	std::make_tuple(CrfFeature::LABELSTUTTERRATE, 0.5, 0.6),
	std::make_tuple(CrfFeature::LABELSTUTTERRATE, 0.6, 0.7),
	std::make_tuple(CrfFeature::LABELSTUTTERRATE, 0.7, 0.8),
	std::make_tuple(CrfFeature::LABELSTUTTERRATE, 0.8, 0.9),
	std::make_tuple(CrfFeature::LABELSTUTTERRATE, 0.9, std::numeric_limits<float>::infinity()),
	std::make_tuple(CrfFeature::LOCALHSWRATENORM, -0.01, 0.0),
	std::make_tuple(CrfFeature::LOCALHSWRATENORM, -0.02, -0.01),
	std::make_tuple(CrfFeature::LOCALHSWRATENORM, -0.03, -0.02),
	std::make_tuple(CrfFeature::LOCALHSWRATENORM, -0.04, -0.03),
	std::make_tuple(CrfFeature::LOCALHSWRATENORM, -10.0, -0.04),
	std::make_tuple(CrfFeature::LOCALHSWRATENORM, 0.0, 0.01),
	std::make_tuple(CrfFeature::LOCALHSWRATENORM, 0.01, 0.02),
	std::make_tuple(CrfFeature::LOCALHSWRATENORM, 0.02, 0.03),
	std::make_tuple(CrfFeature::LOCALHSWRATENORM, 0.03, 0.04),
	std::make_tuple(CrfFeature::LOCALHSWRATENORM, 0.04, std::numeric_limits<float>::infinity()),
	std::make_tuple(CrfFeature::MAXPKMAXNORM, 0, 1),
	std::make_tuple(CrfFeature::MAXPKMAXNORM, 1, 2),
	std::make_tuple(CrfFeature::MAXPKMAXNORM, 2, 3),
	std::make_tuple(CrfFeature::MAXPKMAXNORM, 3, 4),
	std::make_tuple(CrfFeature::MAXPKMAXNORM, 4, 5),
	std::make_tuple(CrfFeature::MAXPKMAXNORM, 5, 6),
	std::make_tuple(CrfFeature::MAXPKMAXNORM, 6, 7),
	std::make_tuple(CrfFeature::MAXPKMAXNORM, 7, 8),
	std::make_tuple(CrfFeature::MAXPKMAXNORM, 8, 9),
	std::make_tuple(CrfFeature::MAXPKMAXNORM, 9, std::numeric_limits<float>::infinity()),
	std::make_tuple(CrfFeature::MEANPULSEWIDTH, 0, 1),
	std::make_tuple(CrfFeature::MEANPULSEWIDTH, 1, 2),
	std::make_tuple(CrfFeature::MEANPULSEWIDTH, 2, 3),
	std::make_tuple(CrfFeature::MEANPULSEWIDTH, 3, 4),
	std::make_tuple(CrfFeature::MEANPULSEWIDTH, 4, 5),
	std::make_tuple(CrfFeature::MEANPULSEWIDTH, 5, 6),
	std::make_tuple(CrfFeature::MEANPULSEWIDTH, 6, 7),
	std::make_tuple(CrfFeature::MEANPULSEWIDTH, 7, 8),
	std::make_tuple(CrfFeature::MEANPULSEWIDTH, 8, std::numeric_limits<float>::infinity()),
	std::make_tuple(CrfFeature::PULSERATE, 0, 1),
	std::make_tuple(CrfFeature::PULSERATE, 1, 2),
	std::make_tuple(CrfFeature::PULSERATE, 2, 3),
	std::make_tuple(CrfFeature::PULSERATE, 3, 4),
	std::make_tuple(CrfFeature::PULSERATE, 4, std::numeric_limits<float>::infinity()),
	std::make_tuple(CrfFeature::SANDWICHRATE, 0.0, 0.02),
	std::make_tuple(CrfFeature::SANDWICHRATE, 0.02, 0.04),
	std::make_tuple(CrfFeature::SANDWICHRATE, 0.04, 0.06),
	std::make_tuple(CrfFeature::SANDWICHRATE, 0.06, 0.08),
	std::make_tuple(CrfFeature::SANDWICHRATE, 0.08, std::numeric_limits<float>::infinity()),
	std::make_tuple(CrfFeature::VITERBISCORE, -5.3, std::numeric_limits<float>::infinity()),
	std::make_tuple(CrfFeature::VITERBISCORE, -6.3, -5.3),
	std::make_tuple(CrfFeature::VITERBISCORE, -7.3, -6.3),
	std::make_tuple(CrfFeature::VITERBISCORE, -8.3, -7.3),
}};
};

}}} // PacBio::Primary::Postprimary
