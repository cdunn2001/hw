#ifndef mongo_dataTypes_TrainedCartDevice_H_
#define mongo_dataTypes_TrainedCartDevice_H_
// Copyright (c) 2018-2019, Pacific Biosciences of California, Inc.
//
// All rights reserved.
//
// THIS SOFTWARE CONSTITUTES AND EMBODIES PACIFIC BIOSCIENCES' CONFIDENTIAL
// AND PROPRIETARY INFORMATION.
//
// Disclosure, redistribution and use of this software is subject to the
// terms and conditions of the applicable written agreement(s) between you
// and Pacific Biosciences, where "you" refers to you or your company or
// organization, as applicable.  Any other disclosure, redistribution or
// use is prohibited.
//
// THIS SOFTWARE IS PROVIDED BY PACIFIC BIOSCIENCES AND ITS CONTRIBUTORS "AS
// IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL PACIFIC BIOSCIENCES OR ITS
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
// OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
// OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
// ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// File Description: A trained model generated programmatically using
// the primary-toolkit python package

/// This file is automatically generated by the CART training scripts in
/// primary-toolkit (classifiers/CART.py). Do not edit this file manually!


#include "TrainedCartParams.h"
#include <common/cuda/memory/UnifiedCudaArray.h>

namespace PacBio {
namespace Mongo {
namespace Data {

struct alignas(64) TrainedCartDevice
{
    TrainedCartDevice() = default;
    // The host needs to call this constructor, so we throw in a random arg to
    // differentiate? Kinda stinks...
    TrainedCartDevice(int)
        : maxAcceptableHalfsandwichRate(ActivityLabeler::TrainedCart::maxAcceptableHalfsandwichRate)
        , hswCurve(ActivityLabeler::TrainedCart::hswCurve)
        , childrenLeft(ActivityLabeler::TrainedCart::childrenLeft)
        , childrenRight(ActivityLabeler::TrainedCart::childrenRight)
        , feature(ActivityLabeler::TrainedCart::feature)
        , threshold(ActivityLabeler::TrainedCart::threshold)
        , value(ActivityLabeler::TrainedCart::value)
    { };

    float maxAcceptableHalfsandwichRate;
    Cuda::Utility::CudaArray<float, ActivityLabeler::TrainedCart::hswCurve.size()> hswCurve;
    Cuda::Utility::CudaArray<int16_t, ActivityLabeler::TrainedCart::childrenLeft.size()> childrenLeft;
    Cuda::Utility::CudaArray<int16_t, ActivityLabeler::TrainedCart::childrenRight.size()> childrenRight;
    Cuda::Utility::CudaArray<int8_t, ActivityLabeler::TrainedCart::feature.size()> feature;
    Cuda::Utility::CudaArray<float, ActivityLabeler::TrainedCart::threshold.size()> threshold;
    Cuda::Utility::CudaArray<int8_t, ActivityLabeler::TrainedCart::value.size()> value;
};

}}} // PacBio::Mongo::Data
#endif // mongo_dataTypes_TrainedCartDevice_H_
