// Copyright (c) 2018, Pacific Biosciences of California, Inc.
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted (subject to the limitations in the
// disclaimer below) provided that the following conditions are met:
//
//  * Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
//
//  * Redistributions in binary form must reproduce the above
//    copyright notice, this list of conditions and the following
//    disclaimer in the documentation and/or other materials provided
//    with the distribution.
//
//  * Neither the name of Pacific Biosciences nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE
// GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY PACIFIC
// BIOSCIENCES AND ITS CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL PACIFIC BIOSCIENCES OR ITS
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
// USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
// OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
// SUCH DAMAGE.

/// This file is automatically generated by the CRF training scripts in
/// primary-toolkit (classifiers/CRF.py). Do not edit this file manually!

#pragma once

#include <array>
#include <limits>
#include <tuple>
#include <vector>

#include <bazio/BlockActivityLabels.h>
#include "HQRegionFinderModels.h"

namespace PacBio {
namespace Primary {
namespace Postprimary {


struct SequelCrfModel
{

enum class State : uint8_t
{
    EMPTY = 0,
    SINGLE,
    MULTI,
    LOW,

    CARDINALITY
};

static std::vector<ActivityLabeler::Activity> State2Activity(
        const std::vector<State>& stateSeq,
        const std::vector<float>& blockSNRs,
        float snrThresh)
{
    // We want to start getting stats on SNR excluded holes again. To do that
    // we give holes with LOW blocks but not A1 blocks an HQ Region (via the
    // HMM, by pretending they're A1 blocks) which will be filtered out
    // downstream
    //
    // However if we have a mix of LOW and A1 blocks, we still want to exclude
    // the LOW blocks (if they're below our SNR threshold, see below)
    bool hasA1 = false;
    for (size_t i = 0; i < stateSeq.size(); ++i)
    {
        if (stateSeq[i] == State::SINGLE
                || ((stateSeq[i] == State::LOW)
                    && (blockSNRs[i] > snrThresh)))
        {
            hasA1 = true;
        }
    }

    // Convert from HQRF Physical State to Activity labels that are
    // compatible-ish with the Iguana HMM.
    std::vector<ActivityLabeler::Activity> activitySeq(stateSeq.size(), ActivityLabeler::A0);
    for (uint32_t i = 0; i < stateSeq.size(); ++i)
    {
        // Move all burst or low blocks to empty
        if (stateSeq[i] == State::LOW)
        {
            if (blockSNRs[i] > snrThresh || !hasA1)
                activitySeq[i] = ActivityLabeler::A1;
            else
                activitySeq[i] = ActivityLabeler::A0;
        }
        else
        {
            activitySeq[i] = static_cast<ActivityLabeler::Activity>(stateSeq[i]);
        }
    }
    return activitySeq;
}


static constexpr std::array<float, 2> hswCurve {{0.022, 0.03}};

static constexpr std::array<std::array<float, 4>, 4> transitionScores {{
	{{4.195059, -6.301343, -7.796121, -6.024595}},
	{{1.859819, 3.566419, -4.01666, -0.927342}},
	{{0.0, -0.337899, 3.138744, 0.293134}},
	{{1.570056, -1.267688, -2.923418, 3.731426}},
}};

static constexpr float numFeatures = 70;

static constexpr std::array<std::array<float, 4>, 70> featureWeights {{
	{{-0.033038, -0.04514, -0.068061, -0.037211}},	// Autocorrelation[0.0,0.1)
	{{-0.175361, 0.003046, -0.01181, -0.203372}},	// Autocorrelation[0.1,0.2)
	{{-2.189543, 0.067301, 0.000154, 0.200086}},	// Autocorrelation[0.2,0.3)
	{{-3.805744, -0.037168, 0.06959, 0.237378}},	// Autocorrelation[0.3,0.4)
	{{-3.60822, 0.028634, 0.076298, 0.21698}},	// Autocorrelation[0.4,0.5)
	{{-3.130337, 0.134656, 0.109867, 0.277069}},	// Autocorrelation[0.5,0.6)
	{{-3.42777, -0.039848, 0.071757, 0.191216}},	// Autocorrelation[0.6,0.7)
	{{-2.974018, -0.09087, 0.030125, 0.078738}},	// Autocorrelation[0.7,0.8)
	{{-2.450926, 0.182395, -0.227437, 0.699941}},	// Autocorrelation[0.8,0.9)
	{{-0.00786, 0.007585, -0.413205, -0.152806}},	// BpzvarNorm[0.0,0.005)
	{{-0.00281, 0.083505, -0.124115, 0.07125}},	// BpzvarNorm[0.005,0.01)
	{{-0.325795, -0.411422, 0.481101, -0.031586}},	// BpzvarNorm[0.01,0.015)
	{{-0.166862, -0.589817, 0.257265, -0.071786}},	// BpzvarNorm[0.015,)
	{{0.022488, 0.273926, 0.107752, -0.02009}},	// LabelStutterRate[0.0,0.1)
	{{-0.191855, 0.004918, 0.11728, -0.077177}},	// LabelStutterRate[0.1,0.2)
	{{0.095672, 0.063798, 0.164624, 0.026977}},	// LabelStutterRate[0.2,0.3)
	{{0.009593, 0.033002, 0.088946, 0.011082}},	// LabelStutterRate[0.3,0.4)
	{{-0.138674, 0.004733, 0.236559, -0.012766}},	// LabelStutterRate[0.4,0.5)
	{{-0.071865, -0.129904, 0.086481, -0.033725}},	// LabelStutterRate[0.5,0.6)
	{{-0.086378, -0.029878, 0.070417, 0.094385}},	// LabelStutterRate[0.6,0.7)
	{{-0.211165, 0.008029, -0.016873, 0.069708}},	// LabelStutterRate[0.7,0.8)
	{{-0.08123, -0.012984, 0.092827, -0.000199}},	// LabelStutterRate[0.8,0.9)
	{{0.028087, -0.277714, 0.253458, -0.034841}},	// LabelStutterRate[0.9,)
	{{-0.244663, 0.039016, -0.005657, -0.125619}},	// LocalHswRateNorm[-0.01,0.0)
	{{0.180053, 0.074129, -0.011457, -0.090619}},	// LocalHswRateNorm[-0.02,-0.01)
	{{0.230174, 0.05711, 0.002841, -0.066065}},	// LocalHswRateNorm[-0.03,-0.02)
	{{0.165245, -0.082468, -0.19966, -0.032713}},	// LocalHswRateNorm[-0.04,-0.03)
	{{-0.02821, 0.111367, -0.076877, -0.159322}},	// LocalHswRateNorm[-10.0,-0.04)
	{{-0.072982, -0.016306, 0.051775, -0.061373}},	// LocalHswRateNorm[0.0,0.01)
	{{-0.227577, -0.062266, 0.022353, 0.029087}},	// LocalHswRateNorm[0.01,0.02)
	{{-0.34003, -0.090789, 0.252015, -0.006473}},	// LocalHswRateNorm[0.02,0.03)
	{{0.010405, -0.170628, 0.210696, 0.01914}},	// LocalHswRateNorm[0.03,0.04)
	{{-0.472118, -0.233914, 0.277981, -0.031988}},	// LocalHswRateNorm[0.04,)
	{{-0.312286, -0.038026, 0.593546, 0.036118}},	// MaxPkMaxNorm[0,1)
	{{0.140831, -0.303475, -0.10717, -0.050569}},	// MaxPkMaxNorm[1,2)
	{{-0.017803, -0.521934, -0.089826, -0.017068}},	// MaxPkMaxNorm[2,3)
	{{-0.131546, -0.051065, -0.057178, 0.021878}},	// MaxPkMaxNorm[3,4)
	{{-0.046111, 0.053889, 0.067042, 0.057982}},	// MaxPkMaxNorm[4,5)
	{{-0.139042, 0.020338, -0.034247, -0.056952}},	// MaxPkMaxNorm[5,6)
	{{-0.140987, -0.011327, 0.00082, 0.02554}},	// MaxPkMaxNorm[6,7)
	{{-0.01676, -0.041222, 0.079712, 0.143531}},	// MaxPkMaxNorm[7,8)
	{{-0.105582, -0.101722, 0.131137, 0.049281}},	// MaxPkMaxNorm[8,9)
	{{-0.143571, 0.011395, -0.007584, 0.005249}},	// MaxPkMaxNorm[9,)
	{{0.170065, -0.424124, 0.143468, -0.059154}},	// MeanPulseWidth[0,1)
	{{-0.006596, -0.208954, 0.911154, -0.13309}},	// MeanPulseWidth[1,2)
	{{0.199158, -0.110832, 0.529765, 0.095137}},	// MeanPulseWidth[2,3)
	{{0.085836, -0.229469, 0.125762, 0.032789}},	// MeanPulseWidth[3,4)
	{{-0.366943, 0.122229, 0.642796, 0.017285}},	// MeanPulseWidth[4,5)
	{{-0.4561, 0.022221, 0.633147, 0.003761}},	// MeanPulseWidth[5,6)
	{{-0.282352, 0.061918, 0.532728, 0.05663}},	// MeanPulseWidth[6,7)
	{{-0.379422, 0.257328, 0.811335, 0.0091}},	// MeanPulseWidth[7,8)
	{{-0.388478, 0.146983, 0.499211, -0.088856}},	// MeanPulseWidth[8,)
	{{0.342663, -0.316396, -0.137313, -0.125171}},	// MinSNR[0,1)
	{{-0.01486, -0.099342, 0.025441, 0.080546}},	// MinSNR[1,2)
	{{-0.027714, -0.255725, 0.087504, 0.054237}},	// MinSNR[2,3)
	{{0.331851, -0.192722, 0.137901, 0.085825}},	// MinSNR[3,4)
	{{0.325271, 0.052779, 0.287644, 0.00608}},	// MinSNR[4,)
	{{0.14214, -0.129681, -0.063171, 0.150656}},	// PulseRate[0,1)
	{{0.333161, 0.012429, -0.003362, 0.055577}},	// PulseRate[1,2)
	{{0.447059, 0.153688, 0.198861, 0.175818}},	// PulseRate[2,3)
	{{0.321204, 0.011505, 0.122849, -0.541471}},	// PulseRate[3,4)
	{{0.451694, -0.651312, -0.074631, 0.005114}},	// PulseRate[4,)
	{{0.015751, 0.183618, -0.027874, -0.071569}},	// SandwichRate[0.0,0.02)
	{{-0.712365, 0.045704, 0.100367, -0.177548}},	// SandwichRate[0.02,0.04)
	{{-0.740498, -0.077224, 0.060132, -0.17228}},	// SandwichRate[0.04,0.06)
	{{-2.085711, 0.013282, 0.350833, -0.056175}},	// SandwichRate[0.06,0.08)
	{{-1.455542, 0.191523, -0.016522, 0.035189}},	// SandwichRate[0.08,)
	{{0.0, 0.441543, -0.057395, -0.22436}},	// ViterbiScore[-6.3,-5.3)
	{{0.077581, 0.032636, -0.084534, 0.025562}},	// ViterbiScore[-7.3,-6.3)
	{{-0.065015, -0.004078, -0.034557, -0.026062}},	// ViterbiScore[-8.3,-7.3)
}};

// Features are specified by their source feature and range
// which allows for learning discontinuous discrete feature
static constexpr std::array<std::tuple<CrfFeature, float, float>, 70> features {{
	std::make_tuple(CrfFeature::AUTOCORRELATION, 0.0, 0.1),
	std::make_tuple(CrfFeature::AUTOCORRELATION, 0.1, 0.2),
	std::make_tuple(CrfFeature::AUTOCORRELATION, 0.2, 0.3),
	std::make_tuple(CrfFeature::AUTOCORRELATION, 0.3, 0.4),
	std::make_tuple(CrfFeature::AUTOCORRELATION, 0.4, 0.5),
	std::make_tuple(CrfFeature::AUTOCORRELATION, 0.5, 0.6),
	std::make_tuple(CrfFeature::AUTOCORRELATION, 0.6, 0.7),
	std::make_tuple(CrfFeature::AUTOCORRELATION, 0.7, 0.8),
	std::make_tuple(CrfFeature::AUTOCORRELATION, 0.8, 0.9),
	std::make_tuple(CrfFeature::BPZVARNORM, 0.0, 0.005),
	std::make_tuple(CrfFeature::BPZVARNORM, 0.005, 0.01),
	std::make_tuple(CrfFeature::BPZVARNORM, 0.01, 0.015),
	std::make_tuple(CrfFeature::BPZVARNORM, 0.015, std::numeric_limits<float>::infinity()),
	std::make_tuple(CrfFeature::LABELSTUTTERRATE, 0.0, 0.1),
	std::make_tuple(CrfFeature::LABELSTUTTERRATE, 0.1, 0.2),
	std::make_tuple(CrfFeature::LABELSTUTTERRATE, 0.2, 0.3),
	std::make_tuple(CrfFeature::LABELSTUTTERRATE, 0.3, 0.4),
	std::make_tuple(CrfFeature::LABELSTUTTERRATE, 0.4, 0.5),
	std::make_tuple(CrfFeature::LABELSTUTTERRATE, 0.5, 0.6),
	std::make_tuple(CrfFeature::LABELSTUTTERRATE, 0.6, 0.7),
	std::make_tuple(CrfFeature::LABELSTUTTERRATE, 0.7, 0.8),
	std::make_tuple(CrfFeature::LABELSTUTTERRATE, 0.8, 0.9),
	std::make_tuple(CrfFeature::LABELSTUTTERRATE, 0.9, std::numeric_limits<float>::infinity()),
	std::make_tuple(CrfFeature::LOCALHSWRATENORM, -0.01, 0.0),
	std::make_tuple(CrfFeature::LOCALHSWRATENORM, -0.02, -0.01),
	std::make_tuple(CrfFeature::LOCALHSWRATENORM, -0.03, -0.02),
	std::make_tuple(CrfFeature::LOCALHSWRATENORM, -0.04, -0.03),
	std::make_tuple(CrfFeature::LOCALHSWRATENORM, -10.0, -0.04),
	std::make_tuple(CrfFeature::LOCALHSWRATENORM, 0.0, 0.01),
	std::make_tuple(CrfFeature::LOCALHSWRATENORM, 0.01, 0.02),
	std::make_tuple(CrfFeature::LOCALHSWRATENORM, 0.02, 0.03),
	std::make_tuple(CrfFeature::LOCALHSWRATENORM, 0.03, 0.04),
	std::make_tuple(CrfFeature::LOCALHSWRATENORM, 0.04, std::numeric_limits<float>::infinity()),
	std::make_tuple(CrfFeature::MAXPKMAXNORM, 0, 1),
	std::make_tuple(CrfFeature::MAXPKMAXNORM, 1, 2),
	std::make_tuple(CrfFeature::MAXPKMAXNORM, 2, 3),
	std::make_tuple(CrfFeature::MAXPKMAXNORM, 3, 4),
	std::make_tuple(CrfFeature::MAXPKMAXNORM, 4, 5),
	std::make_tuple(CrfFeature::MAXPKMAXNORM, 5, 6),
	std::make_tuple(CrfFeature::MAXPKMAXNORM, 6, 7),
	std::make_tuple(CrfFeature::MAXPKMAXNORM, 7, 8),
	std::make_tuple(CrfFeature::MAXPKMAXNORM, 8, 9),
	std::make_tuple(CrfFeature::MAXPKMAXNORM, 9, std::numeric_limits<float>::infinity()),
	std::make_tuple(CrfFeature::MEANPULSEWIDTH, 0, 1),
	std::make_tuple(CrfFeature::MEANPULSEWIDTH, 1, 2),
	std::make_tuple(CrfFeature::MEANPULSEWIDTH, 2, 3),
	std::make_tuple(CrfFeature::MEANPULSEWIDTH, 3, 4),
	std::make_tuple(CrfFeature::MEANPULSEWIDTH, 4, 5),
	std::make_tuple(CrfFeature::MEANPULSEWIDTH, 5, 6),
	std::make_tuple(CrfFeature::MEANPULSEWIDTH, 6, 7),
	std::make_tuple(CrfFeature::MEANPULSEWIDTH, 7, 8),
	std::make_tuple(CrfFeature::MEANPULSEWIDTH, 8, std::numeric_limits<float>::infinity()),
	std::make_tuple(CrfFeature::MINSNR, 0, 1),
	std::make_tuple(CrfFeature::MINSNR, 1, 2),
	std::make_tuple(CrfFeature::MINSNR, 2, 3),
	std::make_tuple(CrfFeature::MINSNR, 3, 4),
	std::make_tuple(CrfFeature::MINSNR, 4, std::numeric_limits<float>::infinity()),
	std::make_tuple(CrfFeature::PULSERATE, 0, 1),
	std::make_tuple(CrfFeature::PULSERATE, 1, 2),
	std::make_tuple(CrfFeature::PULSERATE, 2, 3),
	std::make_tuple(CrfFeature::PULSERATE, 3, 4),
	std::make_tuple(CrfFeature::PULSERATE, 4, std::numeric_limits<float>::infinity()),
	std::make_tuple(CrfFeature::SANDWICHRATE, 0.0, 0.02),
	std::make_tuple(CrfFeature::SANDWICHRATE, 0.02, 0.04),
	std::make_tuple(CrfFeature::SANDWICHRATE, 0.04, 0.06),
	std::make_tuple(CrfFeature::SANDWICHRATE, 0.06, 0.08),
	std::make_tuple(CrfFeature::SANDWICHRATE, 0.08, std::numeric_limits<float>::infinity()),
	std::make_tuple(CrfFeature::VITERBISCORE, -6.3, -5.3),
	std::make_tuple(CrfFeature::VITERBISCORE, -7.3, -6.3),
	std::make_tuple(CrfFeature::VITERBISCORE, -8.3, -7.3),
}};
};

}}} // PacBio::Primary::Postprimary
