
// Copyright (c) 2018-2020, Pacific Biosciences of California, Inc.
//
// All rights reserved.
//
// THIS SOFTWARE CONSTITUTES AND EMBODIES PACIFIC BIOSCIENCES' CONFIDENTIAL
// AND PROPRIETARY INFORMATION.
//
// Disclosure, redistribution and use of this software is subject to the
// terms and conditions of the applicable written agreement(s) between you
// and Pacific Biosciences, where "you" refers to you or your company or
// organization, as applicable.  Any other disclosure, redistribution or
// use is prohibited.
//
// THIS SOFTWARE IS PROVIDED BY PACIFIC BIOSCIENCES AND ITS CONTRIBUTORS "AS
// IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL PACIFIC BIOSCIENCES OR ITS
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
// OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
// OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
// ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// File Description: A trained model generated programmatically using
// the primary-toolkit python package

/// This file is automatically generated by the CRF training scripts in
/// primary-toolkit (classifiers/CRF.py). Do not edit this file manually!

#pragma once

#include <algorithm>
#include <array>
#include <limits>
#include <tuple>
#include <vector>

#include <bazio/BlockActivityLabels.h>
#include "HQRegionFinderModels.h"

namespace PacBio {
namespace Primary {
namespace Postprimary {

struct ZOffsetCrfModel
{

enum class State : uint8_t
{
    EMPTY = 0,
    SINGLE,
    MULTI,

    CARDINALITY
};

static std::vector<ActivityLabeler::Activity> State2Activity(
        const std::vector<State>& stateSeq,
        const std::vector<float>& blockSNRs,
        float snrThresh)
{
    (void)blockSNRs;
    (void)snrThresh;
    std::vector<ActivityLabeler::Activity> ret;
    std::transform(stateSeq.begin(), stateSeq.end(),
                   std::back_inserter(ret),
                   [](const auto& val){ return static_cast<ActivityLabeler::Activity>(val); });
    return ret;
}

static constexpr std::array<float, 2> hswCurve {{0.022, 0.023}};

static constexpr std::array<std::array<float, 3>, 3> transitionScores {{
	{{1.431326, -1.038085, -2.563908}},
	{{-1.002633, 2.507769, -1.611935}},
	{{-2.399289, -1.129246, 2.27173}},
}};

static constexpr float numFeatures = 73;

static constexpr std::array<std::array<float, 3>, 73> featureWeights {{
	{{0.20239, 0.045332, 0.132218}},	// Autocorrelation[0.0,0.1)
	{{0.058311, -0.046973, -0.127118}},	// Autocorrelation[0.1,0.2)
	{{-0.012206, -0.007804, -0.103337}},	// Autocorrelation[0.2,0.3)
	{{-0.137104, 0.007553, -0.037206}},	// Autocorrelation[0.3,0.4)
	{{-0.325207, 0.003734, 0.037536}},	// Autocorrelation[0.4,0.5)
	{{-0.58162, 0.069552, 0.090519}},	// Autocorrelation[0.5,0.6)
	{{-1.319379, 0.138367, 0.158794}},	// Autocorrelation[0.6,0.7)
	{{-1.467604, 0.105586, 0.125659}},	// Autocorrelation[0.7,0.8)
	{{-0.802109, 0.020524, 0.011789}},	// Autocorrelation[0.8,0.9)
	{{1.026213, 0.216115, -0.659147}},	// Autocorrelation[0.9,)
	{{0.039966, 0.142157, -0.023665}},	// BlockLowSNR[0.0,1.0)
	{{-0.075599, -0.085325, 0.073649}},	// BlockLowSNR[1.0,3.0)
	{{0.053417, -0.041171, 0.081736}},	// BlockLowSNR[3.0,3.75)
	{{-0.001712, -0.033996, 0.073827}},	// BlockLowSNR[3.75,4.0)
	{{0.017102, -0.005668, 0.084856}},	// BlockLowSNR[4.0,5.0)
	{{0.080033, -0.039367, 0.055604}},	// BlockLowSNR[5.0,)
	{{0.129418, 0.126175, -0.036524}},	// BpzvarNorm[0.0,0.005)
	{{-0.030751, -0.009335, 0.062438}},	// BpzvarNorm[0.005,0.01)
	{{-0.063533, -0.043025, 0.115787}},	// BpzvarNorm[0.01,0.015)
	{{0.035413, -0.084704, 0.044715}},	// BpzvarNorm[0.015,)
	{{0.217034, -0.092764, -0.144798}},	// LabelStutterRate[0.0,0.1)
	{{-0.223874, 0.06663, 0.121644}},	// LabelStutterRate[0.1,0.2)
	{{-0.086478, 0.047742, 0.07378}},	// LabelStutterRate[0.2,0.3)
	{{-0.017743, 0.030713, 0.066737}},	// LabelStutterRate[0.3,0.4)
	{{-0.161018, -0.002357, 0.086605}},	// LabelStutterRate[0.4,0.5)
	{{0.059888, -0.06076, 0.00763}},	// LabelStutterRate[0.5,0.6)
	{{0.120123, -0.040362, -0.022742}},	// LabelStutterRate[0.6,0.7)
	{{-0.02493, 0.038468, -0.000347}},	// LabelStutterRate[0.7,0.8)
	{{-0.117154, 0.029281, 0.01075}},	// LabelStutterRate[0.8,0.9)
	{{0.050056, -0.086235, 0.048784}},	// LabelStutterRate[0.9,)
	{{0.322805, 0.001662, 0.015906}},	// LocalHswRateNorm[-0.01,0.0)
	{{0.478467, -0.005004, 0.013532}},	// LocalHswRateNorm[-0.02,-0.01)
	{{0.493167, -0.013196, -0.011316}},	// LocalHswRateNorm[-0.03,-0.02)
	{{0.371334, -0.096421, -0.185415}},	// LocalHswRateNorm[-0.04,-0.03)
	{{-0.017953, -0.037343, -0.063842}},	// LocalHswRateNorm[-10.0,-0.04)
	{{0.172577, 0.013272, 0.020187}},	// LocalHswRateNorm[0.0,0.01)
	{{-0.031607, 0.001777, 0.021746}},	// LocalHswRateNorm[0.01,0.02)
	{{-0.045305, 0.025537, 0.039618}},	// LocalHswRateNorm[0.02,0.03)
	{{-0.204527, 0.019821, 0.016507}},	// LocalHswRateNorm[0.03,0.04)
	{{0.232243, -0.041022, 0.167497}},	// LocalHswRateNorm[0.04,)
	{{0.045843, 0.045773, -0.036583}},	// MaxPkMaxNorm[0,1)
	{{0.213927, -0.202179, -0.187866}},	// MaxPkMaxNorm[1,2)
	{{0.193771, -0.062004, -0.03107}},	// MaxPkMaxNorm[2,3)
	{{-0.001668, -0.016328, 0.026675}},	// MaxPkMaxNorm[3,4)
	{{-0.061861, 0.027561, 0.054129}},	// MaxPkMaxNorm[4,5)
	{{0.010152, 0.043225, 0.057018}},	// MaxPkMaxNorm[5,6)
	{{0.021852, -0.04818, 0.012826}},	// MaxPkMaxNorm[6,7)
	{{-0.040595, -0.062568, 0.012688}},	// MaxPkMaxNorm[7,8)
	{{-0.022713, -0.015839, 0.038864}},	// MaxPkMaxNorm[8,9)
	{{0.045686, 0.09371, 0.179668}},	// MaxPkMaxNorm[9,)
	{{0.116993, -0.002599, 0.815733}},	// MeanPulseWidth[0,1)
	{{0.115892, -0.060706, 0.202626}},	// MeanPulseWidth[1,2)
	{{0.115909, -0.10496, 0.198281}},	// MeanPulseWidth[2,3)
	{{0.10996, -0.09547, 0.224693}},	// MeanPulseWidth[3,4)
	{{0.215739, -0.20361, -7.8e-05}},	// MeanPulseWidth[4,5)
	{{-0.332044, 0.370129, 0.672598}},	// MeanPulseWidth[5,6)
	{{-0.635062, 0.123359, 0.409663}},	// MeanPulseWidth[6,7)
	{{-0.791499, -0.086405, 0.252519}},	// MeanPulseWidth[7,8)
	{{-0.269961, -0.027435, 0.313209}},	// MeanPulseWidth[8,)
	{{0.453324, -0.142813, -0.108282}},	// PulseRate[0,1)
	{{0.723043, 0.013591, 0.065505}},	// PulseRate[1,2)
	{{0.41724, 0.09404, 0.112539}},	// PulseRate[2,3)
	{{0.961828, -0.127386, -0.020386}},	// PulseRate[3,4)
	{{0.504905, -0.335606, -0.235676}},	// PulseRate[4,)
	{{0.207038, 0.164501, -0.212184}},	// SandwichRate[0.0,0.02)
	{{-0.244875, 0.098293, -0.084583}},	// SandwichRate[0.02,0.04)
	{{-0.832703, -0.04865, 0.089039}},	// SandwichRate[0.04,0.06)
	{{-0.852279, -0.148038, 0.210942}},	// SandwichRate[0.06,0.08)
	{{-0.020057, -0.113953, 0.18471}},	// SandwichRate[0.08,)
	{{0.104196, 0.051016, 0.007879}},	// ViterbiScore[-5.3,)
	{{0.166417, 0.009683, -0.106211}},	// ViterbiScore[-6.3,-5.3)
	{{0.665021, -0.044487, 0.014181}},	// ViterbiScore[-7.3,-6.3)
	{{1.566988, -0.155192, -0.493607}},	// ViterbiScore[-8.3,-7.3)
}};

// Features are specified by their source feature and range
// which allows for learning discontinuous discrete feature
static constexpr std::array<std::tuple<CrfFeature, float, float>, 73> features {{
	std::make_tuple(CrfFeature::AUTOCORRELATION, 0.0, 0.1),
	std::make_tuple(CrfFeature::AUTOCORRELATION, 0.1, 0.2),
	std::make_tuple(CrfFeature::AUTOCORRELATION, 0.2, 0.3),
	std::make_tuple(CrfFeature::AUTOCORRELATION, 0.3, 0.4),
	std::make_tuple(CrfFeature::AUTOCORRELATION, 0.4, 0.5),
	std::make_tuple(CrfFeature::AUTOCORRELATION, 0.5, 0.6),
	std::make_tuple(CrfFeature::AUTOCORRELATION, 0.6, 0.7),
	std::make_tuple(CrfFeature::AUTOCORRELATION, 0.7, 0.8),
	std::make_tuple(CrfFeature::AUTOCORRELATION, 0.8, 0.9),
	std::make_tuple(CrfFeature::AUTOCORRELATION, 0.9, std::numeric_limits<float>::infinity()),
	std::make_tuple(CrfFeature::BLOCKLOWSNR, 0.0, 1.0),
	std::make_tuple(CrfFeature::BLOCKLOWSNR, 1.0, 3.0),
	std::make_tuple(CrfFeature::BLOCKLOWSNR, 3.0, 3.75),
	std::make_tuple(CrfFeature::BLOCKLOWSNR, 3.75, 4.0),
	std::make_tuple(CrfFeature::BLOCKLOWSNR, 4.0, 5.0),
	std::make_tuple(CrfFeature::BLOCKLOWSNR, 5.0, std::numeric_limits<float>::infinity()),
	std::make_tuple(CrfFeature::BPZVARNORM, 0.0, 0.005),
	std::make_tuple(CrfFeature::BPZVARNORM, 0.005, 0.01),
	std::make_tuple(CrfFeature::BPZVARNORM, 0.01, 0.015),
	std::make_tuple(CrfFeature::BPZVARNORM, 0.015, std::numeric_limits<float>::infinity()),
	std::make_tuple(CrfFeature::LABELSTUTTERRATE, 0.0, 0.1),
	std::make_tuple(CrfFeature::LABELSTUTTERRATE, 0.1, 0.2),
	std::make_tuple(CrfFeature::LABELSTUTTERRATE, 0.2, 0.3),
	std::make_tuple(CrfFeature::LABELSTUTTERRATE, 0.3, 0.4),
	std::make_tuple(CrfFeature::LABELSTUTTERRATE, 0.4, 0.5),
	std::make_tuple(CrfFeature::LABELSTUTTERRATE, 0.5, 0.6),
	std::make_tuple(CrfFeature::LABELSTUTTERRATE, 0.6, 0.7),
	std::make_tuple(CrfFeature::LABELSTUTTERRATE, 0.7, 0.8),
	std::make_tuple(CrfFeature::LABELSTUTTERRATE, 0.8, 0.9),
	std::make_tuple(CrfFeature::LABELSTUTTERRATE, 0.9, std::numeric_limits<float>::infinity()),
	std::make_tuple(CrfFeature::LOCALHSWRATENORM, -0.01, 0.0),
	std::make_tuple(CrfFeature::LOCALHSWRATENORM, -0.02, -0.01),
	std::make_tuple(CrfFeature::LOCALHSWRATENORM, -0.03, -0.02),
	std::make_tuple(CrfFeature::LOCALHSWRATENORM, -0.04, -0.03),
	std::make_tuple(CrfFeature::LOCALHSWRATENORM, -10.0, -0.04),
	std::make_tuple(CrfFeature::LOCALHSWRATENORM, 0.0, 0.01),
	std::make_tuple(CrfFeature::LOCALHSWRATENORM, 0.01, 0.02),
	std::make_tuple(CrfFeature::LOCALHSWRATENORM, 0.02, 0.03),
	std::make_tuple(CrfFeature::LOCALHSWRATENORM, 0.03, 0.04),
	std::make_tuple(CrfFeature::LOCALHSWRATENORM, 0.04, std::numeric_limits<float>::infinity()),
	std::make_tuple(CrfFeature::MAXPKMAXNORM, 0, 1),
	std::make_tuple(CrfFeature::MAXPKMAXNORM, 1, 2),
	std::make_tuple(CrfFeature::MAXPKMAXNORM, 2, 3),
	std::make_tuple(CrfFeature::MAXPKMAXNORM, 3, 4),
	std::make_tuple(CrfFeature::MAXPKMAXNORM, 4, 5),
	std::make_tuple(CrfFeature::MAXPKMAXNORM, 5, 6),
	std::make_tuple(CrfFeature::MAXPKMAXNORM, 6, 7),
	std::make_tuple(CrfFeature::MAXPKMAXNORM, 7, 8),
	std::make_tuple(CrfFeature::MAXPKMAXNORM, 8, 9),
	std::make_tuple(CrfFeature::MAXPKMAXNORM, 9, std::numeric_limits<float>::infinity()),
	std::make_tuple(CrfFeature::MEANPULSEWIDTH, 0, 1),
	std::make_tuple(CrfFeature::MEANPULSEWIDTH, 1, 2),
	std::make_tuple(CrfFeature::MEANPULSEWIDTH, 2, 3),
	std::make_tuple(CrfFeature::MEANPULSEWIDTH, 3, 4),
	std::make_tuple(CrfFeature::MEANPULSEWIDTH, 4, 5),
	std::make_tuple(CrfFeature::MEANPULSEWIDTH, 5, 6),
	std::make_tuple(CrfFeature::MEANPULSEWIDTH, 6, 7),
	std::make_tuple(CrfFeature::MEANPULSEWIDTH, 7, 8),
	std::make_tuple(CrfFeature::MEANPULSEWIDTH, 8, std::numeric_limits<float>::infinity()),
	std::make_tuple(CrfFeature::PULSERATE, 0, 1),
	std::make_tuple(CrfFeature::PULSERATE, 1, 2),
	std::make_tuple(CrfFeature::PULSERATE, 2, 3),
	std::make_tuple(CrfFeature::PULSERATE, 3, 4),
	std::make_tuple(CrfFeature::PULSERATE, 4, std::numeric_limits<float>::infinity()),
	std::make_tuple(CrfFeature::SANDWICHRATE, 0.0, 0.02),
	std::make_tuple(CrfFeature::SANDWICHRATE, 0.02, 0.04),
	std::make_tuple(CrfFeature::SANDWICHRATE, 0.04, 0.06),
	std::make_tuple(CrfFeature::SANDWICHRATE, 0.06, 0.08),
	std::make_tuple(CrfFeature::SANDWICHRATE, 0.08, std::numeric_limits<float>::infinity()),
	std::make_tuple(CrfFeature::VITERBISCORE, -5.3, std::numeric_limits<float>::infinity()),
	std::make_tuple(CrfFeature::VITERBISCORE, -6.3, -5.3),
	std::make_tuple(CrfFeature::VITERBISCORE, -7.3, -6.3),
	std::make_tuple(CrfFeature::VITERBISCORE, -8.3, -7.3),
}};
};

}}} // PacBio::Primary::Postprimary
